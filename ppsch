#!/bin/bash

# ppsch: command-line interface to postpone authorizations scheduler
# Usage:
#       ppsch [ options ]
# Options: 
#       [ -v | --verbose ]: Run in verbose mode.
#       [ -r | --region  ]: AWS region. Default is sa-east-1.
#       [ -t | --table   ]: DynamoDB table. Default is Scheduler.
#       [ -h | --help    ]: Displays help information for ppsch.
#       [ -d | --days    ]: How many days to increase scheduler routine. When not specified, DEFAULT_DAYS will be used.
#       [ -f | --file    ]: File path containing authorizations CIDs. Otherwise, stdin will be read.
# Example:
#       Read from stdin in verbose mode increasing scheduler to DEFAULT_DAYS:
#       cat myFile | ppsch -v
#
#       Read file '/tmp/cids' increasing ten days:
#       ppsch -f '/tmp/cids' -d 10
#
#       Read file '/tmp/cids' decreasing five days:
#       ppsch -f '/tmp/cids' -d -5 

readonly NAME='ppsch'
readonly DEFAULT_REGION='us-east-1'
readonly DEFAULT_TABLE='MY_OWN_TABLE'
readonly DEFAULT_DAYS=5

print_help() {
        local HELP_STR=$(cat <<EOF
ppsch: command-line interface to postpone authorizations scheduler
Usage:
      ppsch [ options ]
Options: 
       [ -v | --verbose ]: Run in verbose mode.
       [ -r | --region  ]: AWS region. Default is sa-east-1.
       [ -t | --table   ]: DynamoDB table. Default is Scheduler.
       [ -h | --help    ]: Displays help information for ppsch.
       [ -d | --days    ]: How many days to increase scheduler routine. When not specified, DEFAULT_DAYS will be used.
       [ -f | --file    ]: File path containing authorizations CIDs. Otherwise, stdin will be read.
Example:
      Read from stdin in verbose mode increasing scheduler to DEFAULT_DAYS:
      cat myFile | ppsch -v

      Read file '/tmp/cids' increasing ten days:
      ppsch -f '/tmp/cids' -d 10

      Read file '/tmp/cids' decreasing five days:
      ppsch -f '/tmp/cids' -d -5 

EOF
)
       echo -e "\n$HELP_STR\n" 
}

warn() {
        log '\033[1;33m' 'WARN' "$1"
}

err() {
        log '\033[31m' 'ERROR' "$1" 1>&2
}

info() {
        log '\033[1;37m' 'INFO' "$1"
}

debug() {
        log '\033[1;37m' 'DEBUG' "$1"
}

log() {
        echo -e "$(dt)\t$1[$2]\033[0m:\t${3}" 
}

dt() {
        date -u +"%Y-%m-%dT%H:%M:%SZ"
}

add() { 
        local REG="$1"
        local TAB="$2"
        local K="$3"
        local SEC="$4"

        local req=$(cat <<EOF
aws dynamodb update-item \
   --region "$REG" \
   --table-name "$TAB" \
   --key '{"name":{"S":"$K"}}' \
   --update-expression 'SET #c = #c + :val' \
   --expression-attribute-names '{"#c":"TTL"}' \
   --expression-attribute-values '{":val": {"N":"$SEC"}}' \
   --return-values UPDATED_OLD
EOF
)
        echo -n "$(eval $req 2>&1)"
}

HAS_AWSCLI=$(command -v aws)
if [[ -z "$HAS_AWSCLI" ]]; then
        err "No aws executable found. See: https://github.com/aws/aws-cli"
        exit 1
fi

HAS_JQ=$(command -v jq)
if [[ -z "$HAS_JQ" ]]; then
        err "No jq executable found. See: https://github.com/stedolan/jq"
        exit 1
fi

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
-f | --file)
        shift; FILE="$1"
        ;;
-t | --table)
        shift; TABLE="$1"
        ;;
-r | --region)
        shift; REGION="$1"
        ;;
-d | --days)
        shift; DAYS="$1"
        ;;
-v | --verbose)
        VERBOSE=1
        ;;
-h | --help)
        print_help 
        exit 0
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi

LOADED_FILE=$(cat "$FILE" 2>/dev/null)
if [[ -z "$FILE" ]]; then
        info 'No (--file) informed. Reading from STDIN.'

        if [[ ! -s '/dev/stdin' ]]; then
                info 'STDIN is empty. Exiting.' 
                print_help
                exit 1
        fi
        
        LOADED_FILE=$(</dev/stdin)
fi

if [[ -z "$TABLE" ]]; then
        [[ $VERBOSE -eq 1 ]] && debug "No argument (--table) informed. Using default ($DEFAULT_TABLE)."
        TABLE="$DEFAULT_TABLE"
fi

if [[ -z "$REGION" ]]; then
        [[ $VERBOSE -eq 1 ]] && debug "No argument (--region) informed. Using default ($DEFAULT_REGION)."
        REGION="$DEFAULT_REGION"
fi

if [[ -z "$DAYS" ]]; then
        [[ $VERBOSE -eq 1 ]] && debug "No argument (--region) informed. Using default ($DEFAULT_DAYS)."
        DAYS="$DEFAULT_DAYS"
fi

SECONDS=$(($DAYS * 24 * 60 ** 2))
info "Adding ($SECONDS) in TTL attribute of ($TABLE) table in which is ($DAYS) days in seconds."


for KEY in $LOADED_FILE; do
        RESPONSE=$(add "$REGION" "$TABLE" "$KEY" "$SECONDS")
        RESPONSE="${RESPONSE/$'\n'/}"
        OLD_TTL=$(echo -n "$RESPONSE" | jq .Attributes.TTL.N)
        OLD_TTL=${OLD_TTL//\"/}
        [[ "$OLD_TTL" =~ ^[0-9]+$ ]] && info "($SECONDS) seconds added to ($OLD_TTL) TTL of ($KEY) key." || \
                err "Not possible to update key ($KEY). Error: ($RESPONSE)"
done

info "Process of postpone ($DAYS) days within ($TABLE) table has successfully finished."
